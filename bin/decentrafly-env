#!/bin/bash
set -e

function print_env() {
    FILE=/opt/decentrafly/.env
    ENVS=(
        "ADSB_DONGLE_SERIAL"
        "READSB_NET_CONNECTOR"
        "MLATHUB_NET_CONNECTOR"
        "DECENTRAFLY_MLAT_CONFIG"
        "DECENTRAFLY_ADDITIONAL_NET_CONNECTOR"
        "DECENTRAFLY_ADDITIONAL_MLAT_CONFIG"
        "DECENTRAFLY_MLAT_PRIVACY"
        "DUMP978_DONGLE_SERIAL"
    )
    for env in "${ENVS[@]}"; do
        echo "[ info] $env=$(grep ^$env $FILE | cut -d "=" -f 2)"
    done
}

# If first argument is set,
# decentrafly-env set MYHOST 10.0.0.2
function set_env() {
    # If value is empty, print a warning
    if [ -z "$3" ]; then
        echo "[ warn] $2 is empty. If you want to unset it, use decentrafly-env unset $2"
        exit 1
    fi

    # Check if variable is already in the file
    if grep -q "^$2=" /opt/decentrafly/.env; then
        # Check if it is already set to this value
        if grep -q "^$2=$3" /opt/decentrafly/.env; then
            echo "[ info] $2 is already set to $3"
            exit 0
        fi
        echo "[ info] $2 is currently set to $(grep $2 /opt/decentrafly/.env | cut -d "=" -f 2)"
        # If it is, replace it
        sed -i "s/^$2=.*/$2=$3/" /opt/decentrafly/.env
        echo "[ info] $2 has now been changed to $(grep $2 /opt/decentrafly/.env | cut -d "=" -f 2)"
    # If it is commented out (might be a space after the #)
    elif grep -q "^# *$2=" /opt/decentrafly/.env; then
        echo "[ info] $2 is currently commented out"
        # Uncomment it
        sed -i "s/^# *$2=.*/$2=$3/" /opt/decentrafly/.env
        echo "[ info] $2 has now been changed to $(grep $2 /opt/decentrafly/.env | cut -d "=" -f 2)"
    else
        echo "[ info] $2 is not set"
        # If it is not in the file, add it
        echo "$2=$3" >>/opt/decentrafly/.env
        echo "[ info] $2 has now been set to $(grep $2 /opt/decentrafly/.env | cut -d "=" -f 2)"
    fi
    exit 0
}

function unset_env() {
    # Check if variable is already in the file
    if grep -q "^$2=" /opt/decentrafly/.env; then
        echo "[ info] $2 is currently set to $(grep $2 /opt/decentrafly/.env | cut -d "=" -f 2)"
        # If it is, remove the line completely
        sed -i "/^$2=.*/d" /opt/decentrafly/.env
        echo "[ info] $2 has now been unset"
    else
        echo "[ info] $2 is not set"
        echo "[ info] Nothing to do"
    fi
    exit 0
}

# If argument = list, view, show, print:
if [ "$1" == "list" ] || [ "$1" == "view" ] || [ "$1" == "show" ] || [ "$1" == "print" ]; then
    print_env
    exit 0
fi

# If argument = set, change, edit, replace, modify, update:
if [ "$1" == "set" ] || [ "$1" == "change" ] || [ "$1" == "edit" ] || [ "$1" == "replace" ] || [ "$1" == "modify" ] || [ "$1" == "update" ]; then
    if [ $# -ne 3 ]; then
        echo "Usage: decentrafly-env $1 <variable> <value>"
        exit 1
    fi
    set_env "$@"
    exit 0
fi

# If argument = unset, remove, delete, clear:
if [ "$1" == "unset" ] || [ "$1" == "remove" ] || [ "$1" == "delete" ] || [ "$1" == "clear" ]; then
    if [ $# -ne 2 ]; then
        echo "Usage: decentrafly-env $1 <variable>"
        exit 1
    fi
    unset_env "$@"
    exit 0
fi

function usage() {
    echo "[ info] Usage:"
    echo "[ info]   decentrafly-env list"
    echo "[ info]   decentrafly-env set <variable> <value>"
    echo "[ info]   decentrafly-env unset <variable>"
    exit 1
}
usage
