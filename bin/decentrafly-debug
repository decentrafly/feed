#!/bin/bash
set -e
cd /opt/decentrafly

function check_for_docker() {
    if ! command -v docker &>/dev/null; then
        echo "[ fail] Docker could not be found. Please install docker."
        echo "[ run] decentrafly-init"
        return 1
    fi
}

function check_containerd_running() {
    if ! systemctl is-active --quiet containerd; then
        echo "[ fail] Containerd is not running. Trying to start containerd..."
        echo "[>run] systemctl start containerd"
        systemctl stop containerd || true
        systemctl start containerd
        # Check if it is now running
        if ! systemctl is-active --quiet containerd; then
            echo "[ fail] Containerd is still not running. Please start containerd."
            return 1
        fi
    fi
}

function check_docker_running() {
    if ! systemctl is-active --quiet docker; then
        echo "[ fail] Docker is not running. Trying to start docker.."
        echo "[>run] systemctl start docker"
        systemctl stop docker || true
        systemctl start docker
        # Check if it is now running
        if ! systemctl is-active --quiet docker; then
            echo "[ fail] Docker is still not running. Please start docker."
            return 1
        fi
    fi
}

function check_for_sdr() {
    if ! command -v rtl_test &>/dev/null; then
        echo "[ fail] RTL-SDR could not be found. Please install rtl-sdr."
        echo "[ run] decentrafly-init"
        return 1
    fi
}

function check_for_required_env_vars() {
    FAILED=0
    REQUIRED_ENV_VARS=(
        "FEEDER_LAT" "FEEDER_LONG" "FEEDER_TZ"
        "MLAT_SITE_NAME" "ADSB_DONGLE_SERIAL"
        "READSB_NET_CONNECTOR" "MLATHUB_NET_CONNECTOR"
    )
    for var in "${REQUIRED_ENV_VARS[@]}"; do
        # Check if it exists and not empty, then return with 0
        if grep -q "^$var=" /opt/decentrafly/.env && grep -q "^$var=.*$" /opt/decentrafly/.env; then
            return 0
        fi
        # Check if the variable is missing from /opt/decentrafly/.env
        if ! grep -q "^$var=" /opt/decentrafly/.env; then
            echo "[ fail] $var is missing in /opt/decentrafly/.env"
            FAILED=1
        # Check if it there, but commented out
        elif grep -q "^#$var=" /opt/decentrafly/.env; then
            echo "[ fail] $var is commented out in /opt/decentrafly/.env"
            FAILED=1
        # Check if it is there, but empty
        elif grep -q "^$var=$" /opt/decentrafly/.env; then
            echo "[ fail] $var is empty in /opt/decentrafly/.env"
            FAILED=1
        else
            echo "[ fail] $var is missing. Please report this bug."
            FAILED=1
        fi
    done
    return $FAILED
}

function check_for_unchanged_default_vars() {
    FAILED=0
    if grep -q "^FEEDER_ALT_M=dd$" /opt/decentrafly/.env; then
        echo "[ fail] FEEDER_ALT_M is set to the default value of dd. Please set it to your altitude in meters."
        FAILED=1
    fi
    # FEEDER_LAT
    if grep -q "^FEEDER_LAT=dd.ddddd$" /opt/decentrafly/.env; then
        echo "[ fail] FEEDER_LAT is set to the default value of dd.ddddd. Please set it to your latitude."
        FAILED=1
    fi
    # FEEDER_LONG
    if grep -q "^FEEDER_LONG=dd.ddddd$" /opt/decentrafly/.env; then
        echo "[ fail] FEEDER_LONG is set to the default value of dd.ddddd. Please set it to your longitude."
        FAILED=1
    fi
    return $FAILED
}

function check_for_required_files() {
    REQUIRED_FILES=(
        "services.txt" "docker-compose.yaml" ".env"
    )
    for file in "${REQUIRED_FILES[@]}"; do
        # Check if it is set, non empty (and uncommented) on /opt/decentrafly/.env
        if ! [ -f "/opt/decentrafly/$file" ]; then
            echo "[ fail] $file is missing in /opt/decentrafly/"
        fi
    done
}

function check_env_format() {
    # Wrong: READSB_ADDITIONAL_NET_CONNECTOR=feed.decentrafly.com,64004,beast_reduce_out,feed.decentrafly.com,30004,beast_reduce_out
    # Right: READSB_ADDITIONAL_NET_CONNECTOR=feed.decentrafly.com,64004,beast_reduce_out;feed.decentrafly.com,30004,beast_reduce_out
    #check if "out," is in the string
    if grep -q "out," /opt/decentrafly/.env; then
        echo "[ fail] READSB_ADDITIONAL_NET_CONNECTOR is in the wrong format. Please use ; instead of ,"
        echo "[ fail] Example: READSB_ADDITIONAL_NET_CONNECTOR=feed.adsb.one,64004,beast_reduce_out;feed.theairtraffic.com,30004,beast_reduce_out"
        return 1
    fi
}

function check_for_old_envs() {
    # Check for old envs
    # For example, DECENTRAFLY_MLAT_PRIVACY is now DECENTRAFLY_MLAT_CONFIG
    OLD_NEW_ENVS=(
        "DECENTRAFLY_MLAT_PRIVACY=DECENTRAFLY_MLAT_CONFIG"
    )
    for env in "${OLD_NEW_ENVS[@]}"; do
        OLD_ENV=$(echo $env | cut -d= -f1)
        NEW_ENV=$(echo $env | cut -d= -f2)
        if grep -q "^$OLD_ENV=" /opt/decentrafly/.env; then
            echo "[ fail] $OLD_ENV is deprecated. Please use $NEW_ENV instead."
            # if it is DECENTRAFLY_MLAT_PRIVACY, suggest:
            if [ "$OLD_ENV" = "DECENTRAFLY_MLAT_PRIVACY" ]; then
                echo "[ fail] If you would like to keep privacy mode on (does not appear on map.adsb.lol)"
                echo "[ fail] You can run:"
                echo "[  run] decentrafly-env unset DECENTRAFLY_MLAT_PRIVACY"
                echo "[  run] decentrafly-env set DECENTRAFLY_MLAT_CONFIG --privacy"
                echo "[ else]"
                echo "[ fail] If you would like to turn privacy mode off (appears on map.adsb.lol)"
                echo "[  run] decentrafly-env unset DECENTRAFLY_MLAT_CONFIG"
            fi
            return 1
        fi
    done
}

function check_beast_in_mlat_config() {
    # If there is a beast connection in the mlat config, it will not work
    # Check if 'beast' is in the same line as '^DECENTRAFLY_ADDITIONAL_MLAT_CONFIG=
    if grep -q "^DECENTRAFLY_ADDITIONAL_MLAT_CONFIG=.*,beast_.*" /opt/decentrafly/.env; then
        echo "[ fail] DECENTRAFLY_ADDITIONAL_MLAT_CONFIG is set to a beast connection. Please remove it."
        return 1
    fi
}

function check_altitude() {
    # Check if altitude is set to a number
    if ! grep -q "^FEEDER_ALT_M=[0-9]*$" /opt/decentrafly/.env; then
        echo "[ fail] FEEDER_ALT_M is not set to a number. Please set it to your altitude in meters."
        return 1
    fi
}
function check_altitude_ft() {
    # Check if FEEDER_ALT_FT exists, as it is not supported, error!
    if grep -q "^FEEDER_ALT_FT=[0-9]*$" /opt/decentrafly/.env; then
        echo "[ fail] FEEDER_ALT_FT is set. Please remove it, as it is not supported."
        echo "[ fail] Please set your altitude in meters in FEEDER_ALT_M."
        return 1
    fi
}

function check_adsb_sdr_serial_exists(){
    # We want to check if ADSB_DONGLE_SERIAL is set to a serial number that exists
    RTL_SERIALS=$(rtl_test -d99999 2>&1 | grep -o "SN:.*" | sed 's/SN: //')
    if [ -z "$RTL_SERIALS" ]; then
        echo "[ fail] No RTL-SDR dongles found. Please connect one and try again."
        return 1
    fi
    ADSB_DONGLE_SERIAL=$(grep "^ADSB_DONGLE_SERIAL=" /opt/decentrafly/.env | cut -d= -f2)
    if ! echo "$RTL_SERIALS" | grep -q "$ADSB_DONGLE_SERIAL"; then
        echo "[ fail] ADSB_DONGLE_SERIAL is set to $ADSB_DONGLE_SERIAL, but no RTL-SDR dongle with that serial number was found."
        echo "[ info] Your available dongles are:"
        for serial in $RTL_SERIALS; do
            echo "[ info] Serial: $serial"
            echo "[  run] decentrafly-env set ADSB_DONGLE_SERIAL $serial"
        done
        echo "[ info] If you would like to use a different dongle, please run one of the above commands to set the dongle serial."
        echo "[ info] Then, run decentrafly-up to restart the containers."
        return 1
    fi
    return 0
}
function run_checks() {
    FAILED=0
    check_for_docker || FAILED=1
    check_containerd_running || FAILED=1
    check_docker_running || FAILED=1
    check_for_sdr || FAILED=1
    check_for_required_env_vars || FAILED=1
    check_for_required_files || FAILED=1
    check_env_format || FAILED=1
    check_for_unchanged_default_vars || FAILED=1
    check_for_old_envs || FAILED=1
    check_beast_in_mlat_config || FAILED=1
    check_altitude || FAILED=1
    check_altitude_ft || FAILED=1
    check_adsb_sdr_serial_exists || FAILED=1

    # If any of the checks failed, exit with 1
    if [ $FAILED -eq 1 ]; then
        exit 1
    fi
}
run_checks
